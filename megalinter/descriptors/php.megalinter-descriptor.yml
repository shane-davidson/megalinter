descriptor_id: PHP
descriptor_type: language
descriptor_flavors:
  - cupcake
  - php
file_extensions:
  - ".php"
install:
  apk:
    - gnupg
    - php83
    - php83-phar
    - php83-mbstring
    - php83-xmlwriter
    - php83-tokenizer
    - php83-ctype
    - php83-curl
    - php83-dom
    - php83-simplexml
    - dpkg
  dockerfile:
    - |
      RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" \
          && export GITHUB_AUTH_TOKEN \
          && wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \
          && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \
          && PHAR_KEY_ID="0x6AF725270AB81E04D79442549D8A98B29B2D5D79" \
          && ( gpg --keyserver hkps://keys.openpgp.org --recv-keys "$PHAR_KEY_ID" \
             || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "$PHAR_KEY_ID" \
             || gpg --keyserver keyserver.pgp.com --recv-keys "$PHAR_KEY_ID" \
             || gpg --keyserver pgp.mit.edu --recv-keys "$PHAR_KEY_ID" ) \
          && gpg --verify phive.phar.asc phive.phar \
          && chmod +x phive.phar \
          && mv phive.phar /usr/local/bin/phive \
          && rm phive.phar.asc \
          && update-alternatives --install /usr/bin/php php /usr/bin/php83 110
linters:
  # PHPCS
  - linter_name: phpcs
    name: PHP_PHPCS
    linter_url: https://github.com/PHPCSStandards/PHP_CodeSniffer
    linter_repo: https://github.com/PHPCSStandards/PHP_CodeSniffer
    linter_rules_configuration_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file
    linter_rules_inline_disable_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-parts-of-a-file
    linter_rules_ignore_config_url: https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-files-and-folders
    linter_rules_url: https://gist.github.com/tmsnvd/057ef1cf4fd412e8c8e866e5ba5119bc
    config_file_name: phpcs.xml
    cli_lint_mode: list_of_files
    cli_config_arg_name: "--standard="
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "FOUND ([0-9]+) ERRORS"
    examples:
      - "phpcs myfile.php"
      - "phpcs --standard=phpcs.xml myfile.php"
      - "phpcs --standard=phpcs.xml mydir/ myfile.php"
    install:
      dockerfile:
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192,95DE904AB800754A11D80B605E6DDE998AB73B8E
    ide:
      atom:
        - name: linter-phpcs
          url: https://atom.io/packages/linter-phpcs
        - name: atom-phpcs
          url: https://github.com/bpearson/atom-phpcs
      idea:
        - name: phpcs
          url: https://www.jetbrains.com/help/phpstorm/2019.1/using-php-code-sniffer.html
      sublime:
        - name: sublime-phpcs
          url: https://github.com/benmatselby/sublime-phpcs
        - name: SublimeLinter-phpcs
          url: https://github.com/SublimeLinter/SublimeLinter-phpcs
      vscode:
        - name: vscode-phpcs
          url: https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs
  # PHP Stan
  - linter_name: phpstan
    name: PHP_PHPSTAN
    linter_url: https://phpstan.org/
    linter_repo: https://github.com/phpstan/phpstan
    linter_image_url: https://i.imgur.com/WaRKPlC.png
    linter_rules_configuration_url: https://phpstan.org/config-reference#neon-format
    linter_rules_inline_disable_url: https://phpstan.org/user-guide/ignoring-errors#ignoring-in-code-using-phpdocs
    config_file_name: phpstan.neon.dist
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - "analyse"
      - "--no-progress"
      - "--no-ansi"
      - "--memory-limit"
      - "1G"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "Found ([0-9]+) error"
    examples:
      - "phpstan analyse --no-progress --no-ansi myfile.php"
      - "phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php"
      - "phpstan analyse --no-progress --no-ansi myfile1.php myfile2.php"
      - "phpstan analyse --no-progress --no-ansi mydir1/ mydir2/ myfile.php"
    install:
      dockerfile:
        - FROM ghcr.io/phpstan/phpstan:latest-php8.3 as phpstan
        - COPY --link --from=phpstan /composer/vendor/phpstan/phpstan/phpstan.phar /usr/bin/phpstan
        - RUN chmod +x /usr/bin/phpstan
      idea:
        - name: PHPStan / Psalm / Generics
          url: https://plugins.jetbrains.com/plugin/12754-phpstan--psalm--generics
      vscode:
        - name: vscode-phpstan
          url: https://marketplace.visualstudio.com/items?itemName=calsmurf2904.vscode-phpstan
  # PSALM
  - linter_name: psalm
    name: PHP_PSALM
    can_output_sarif: true
    linter_url: https://psalm.dev
    linter_repo: https://github.com/vimeo/psalm
    linter_rules_url: https://psalm.dev/docs/running_psalm/issues/
    linter_banner_image_url: https://i1.wp.com/phpmagazine.net/wp-content/uploads/2018/12/PsalmLogo.png?w=653&ssl=1
    linter_rules_configuration_url: https://psalm.dev/docs/running_psalm/configuration/
    linter_rules_inline_disable_url: https://psalm.dev/docs/running_psalm/dealing_with_code_issues/#docblock-suppression
    config_file_name: psalm.xml
    cli_lint_mode: list_of_files
    cli_lint_extra_args:
      - --output-format=console
    cli_config_arg_name: "--config="
    cli_sarif_args:
      - "--report={{SARIF_OUTPUT_FILE}}"
    version_extract_regex: "((\\d+(\\.\\d+)+)|Psalm (.*)@)"
    cli_lint_errors_count: regex_number
    cli_lint_errors_regex: "([0-9]+) error"
    examples:
      - "psalm myfile.php"
      - "psalm myfile.php mydir/"
      - "psalm --config=psalm.xml myfile.php"
      - "psalm --config=psalm.xml myfile.php mydir/"
    install:
      dockerfile:
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1,12CE0F1D262429A5
    ide:
      idea:
        - name: PHPStan / Psalm / Generics
          url: https://plugins.jetbrains.com/plugin/12754-phpstan--psalm--generics
          id: de.espend.idea.php.generics
      vscode:
        - name: Psalm VSCode Plugin
          url: https://marketplace.visualstudio.com/items?itemName=getpsalm.psalm-vscode-plugin
  # PHPLint
  - linter_name: phplint
    linter_url: https://github.com/overtrue/phplint
    linter_repo: https://github.com/overtrue/phplint
    config_file_name: .phplint.yml
    cli_lint_mode: list_of_files
    examples:
      - "phplint myfile.php"
      - "phplint mydir"
      - "phplint mydir myfile.php"
      - "phplint mydir -vvv"
    install:
      dockerfile:
        - |
          RUN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install overtrue/phplint --force-accept-unsigned -g
